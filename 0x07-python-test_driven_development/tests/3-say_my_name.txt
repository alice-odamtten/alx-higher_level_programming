The ``3-say_my_name`` module
============================

Using ``say_my_name``
---------------------

This file is in reStructuredText format.
First import ``say_my_name`` from the 3-say_my_name module:

	>>> say_my_name = __import__('3-say_my_name').say_my_name

Usage:
	>>> say_my_name("Sakyibea", "Alice")
	My name is Sakyibea Alice

Testing for none as last name:
	>>> say_my_name("Walter", None)
	Traceback (most recent call last):
	TypeError: last_name must be a string

Testing for only first name passed:
	>>> say_my_name("Alice")
	My name is Alice

Testing for int passed as firstname:
	>>> try:
	...     say_my_name(12, "Alice")
	... except Exception as e:
	...     str(e)
	'first_name must be a string'

Testing for lastname passed as an int:
	>>> try:
	...     say_my_name("John", 123)
	... except Exception as e:
	...     str(e)
	'last_name must be a string'

Testing for firstname and lastname with special characters:
	>>> say_my_name("Alice*", "Konney#@")
	My name is Alice* Konney#@

Testing firstname and lastname with whitespace characters:
	>>> say_my_name("   Alice ", "   Sakyibea   ")
	My name is    Alice     Sakyibea   

Testing for empty strings for first name and last name:
	>>> say_my_name("", "")
	My name is 

Testing for firstname as empty:
	>>> say_my_name("", "Odamtten")
	My name is  Odamtten

Testing for lastname as empty:
	>>> say_my_name("Alice", "")
	My name is Alice	

Testing for nothing passed:
	>>> say_my_name()
	Traceback (most recent call last)
		...
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'
